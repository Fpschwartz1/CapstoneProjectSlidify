rnorm(10)
plot(rnorm(100))
plot(sort(rnorm(100)))
r <- rnorm(100)
plot(sort(r))
lines(sort(r))
lines(sort(r), col="red")
install.packages(c("colorspace", "gbm", "manipulate"))
library(RWeka)
plot(rnorm(100))
plot(rnorm(100),main=parse(expression(beta^2)))
plot(rnorm(100),main=expression(beta^2))
plot(rnorm(100),main=expression(beta*hat^2))
plot(rnorm(100),main=expression(beta*hat^2))
plot(rnorm(100),main=expression(beta^hat^2))
plot(rnorm(100),main=expression(hat(beta)^2))
plot(rnorm(100),main=expression(hat(beta)[2]))
plot(rnorm(100),main=expression(hat(beta)[2]))
plot(rnorm(100),main=expression(italic(hat(beta)[2]))
)
plot(rnorm(100),main=expression(italic(hat(beta)[2])))
plot(rnorm(100),main=expression(italic(hat(beta))[2]))
plot(rnorm(100),main=expression(hat(beta)[2]))
xlab=expression(hat(beta)[2]))
xlab=expression(hat(beta)[2]))
?plot
plot(rnorm(100),
main=expression(hat(beta)[2]),
xlab=expression(hat(beta)[2]))
? pt
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
cor(y,x)
cor(x,y)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
? pnorm
pnorm(1.96)
pnorm(1.96, lower.tail=FALSE)
qnorm(pnorm(1.96, lower.tail=FALSE))
qnorm(1-pnorm(1.96, lower.tail=FALSE))
pnorm(2, lower.tail=FALSE)
pnorm(2, lower.tail=FALSE) * 2
pnorm(1.96, lower.tail=FALSE) * 2
pnorm(1.96, lower.tail=FALSE) + pnorm(1.96)
pnorm(-1.96)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat;
fit <- lm(y ~ x)
summary(fit)$coefficients
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x) # Equação 6.15
beta0 <- mean(y) - beta1 * mean(x) # Equação 6.11
mu <- beta0 + beta1 * x            # Equação 6.7
e <- y -  mu                       # Equação 6.8
sigma <- sqrt(sum(e^2) / (n-2))    # Equação 6.19
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma  # Equação 6.31
seBeta1 <- sigma / sqrt(ssx)                         # Equação 6.30
# Estatística t para o teste de hipótese
# H0: β0 = 0 ou H1: β0 >,<,≠ 0
tBeta0 <- beta0 / seBeta0;
# H0: β1 = 0 ou H1: β1 >,<,≠ 0
tBeta1 <- beta1 / seBeta1
# probabilidade p da estatístcia t com df = n-2
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
# monta um data frame com os resultados
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0),
c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value","Pr(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
# coeficiente de determinação
R2 <- sum((mu - mean(y)^2)) / sum((y - mu)^2)
fit
summary(fit)
VRR <- sum((mu - mean(y)^2))     # Equação 6.23
VRE <- sum((y - mu)^2)           # Equação 6.22
VT  <- VRR + VRE                 # Equação 6.24
R2  <- VRR / VT                  # Equação 6.25
VRR <- sum((mu - mean(y))^2)     # Equação 6.23
VRE <- sum((y - mu)^2)           # Equação 6.22
VT  <- VRR + VRE                 # Equação 6.24
R2  <- VRR / VT                  # Equação 6.25
R2a <- 1 - ((n-1)/(n-2)) * (1-R2)
print(paste("Residual standard error:",round(sigma,2),"on",n-2,"degrees of freedom"))
print(paste0("Multiple R-squared: ",round(R2,4),", Adjusted R-squared: ", round(R2a,4)))
summary(fit)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x) # Equação 6.15
beta0 <- mean(y) - beta1 * mean(x) # Equação 6.11
mu <- beta0 + beta1 * x            # Equação 6.7
e <- y -  mu                       # Equação 6.8
sigma <- sqrt(sum(e^2) / (n-2))    # Equação 6.19
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma  # Equação 6.31
seBeta1 <- sigma / sqrt(ssx)                         # Equação 6.30
# Estatística t para o teste de hipótese
# H0: β0 = 0 ou H1: β0 >,<,≠ 0
tBeta0 <- beta0 / seBeta0;
# H0: β1 = 0 ou H1: β1 >,<,≠ 0
tBeta1 <- beta1 / seBeta1
# probabilidade p da estatístcia t com df = n-2
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
# monta um data frame com os resultados
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0),
c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value","Pr(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
#
# coeficiente de determinação
VRR <- sum((mu - mean(y))^2)     # Equação 6.23
VRE <- sum((y - mu)^2)           # Equação 6.22
VT  <- VRR + VRE                 # Equação 6.24
R2  <- VRR / VT                  # Equação 6.25
# coeficiente de determinação ajustado
R2a <- 1 - ((n-1)/(n-2)) * (1-R2)
coefTable
print(paste("Residual standard error:",round(sigma,2),"on",n-2,"degrees of freedom"))
print(paste0("Multiple R-squared: ",round(R2,4),", Adjusted R-squared: ", round(R2a,4)))
? print
? echo
f1 <- function(x) x
f2 <- function(x) invisible(x)
f1(1)  # prints
f2(1)  # does not
paste("Residual standard error:",round(sigma,2),"on",n-2,"degrees of freedom")
summary(fit)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat;
fit <- lm(y ~ x)
coefs <- summary(fit)$coefficients
coefs[1,1] + c(-1, 1) * qt(.975, df=fit$df) * coefs[1,2]
coefs[2,1] + c(-1, 1) * qt(.975, df=fit$df) * coefs[2,2]
suppressPackageStartupMessages(library("tm"))
stopwords("english")
n <- 100; x <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n)
y <- x + x2 + x3 + rnorm(n, sd = .1)
e <- function(a, b) a -  sum( a * b ) / sum( b ^ 2) * b
ey <- e(e(y, x2), e(x3, x2))
ex <- e(e(x, x2), e(x3, x2))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(y ~ x + x2 + x3 - 1))
x4 <- rnorm(n)
y <- x + x2 + x3 + x4 + rnorm(n, sd = .1)
ey <- e(e(y, x2), e(e(x2, x3), e(x4, x3)) )
fit <- lm(y <- x + x2 + x3 + x4 -1)
fit <- lm(y ~ x + x2 + x3 + x4 -1)
resid(fit)
ef <- resid(fit)
fit <- lm(y ~ x2 + x3 + x4 -1)
ef <- resid(fit)
n <- 100; x <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n)
y <- x + x2 + x3 + rnorm(n, sd = .1)
e <- function(a, b) a -  sum( a * b ) / sum( b ^ 2) * b
ey <- e(e(y, x2), e(x3, x2))
ex <- e(e(x, x2), e(x3, x2))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(y ~ x + x2 + x3 - 1))
x4 <- rnorm(n)
y <- x + x2 + x3 + x4 + rnorm(n, sd = .1)
ey <- e(e(y, x2), e(e(x2, x3), e(x4, x3)) )
ex <- e(e(x, x2), e(x3, x2))
sum(ey * ex) / sum(ex ^ 2)
fit <- lm(y ~ x2 + x3 + x4 -1)
eyf <- resid(fit)
n <- 100; x <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n)
y <- x + x2 + x3 + rnorm(n, sd = .1)
e <- function(a, b) a -  sum( a * b ) / sum( b ^ 2) * b
ey <- e(e(y, x2), e(x3, x2))
ex <- e(e(x, x2), e(x3, x2))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(y ~ x + x2 + x3 - 1))
x4 <- rnorm(n)
y <- x + x2 + x3 + x4 + rnorm(n, sd = .1)
ey <- e(e(y, x2), e(e(x2, x3), e(x4, x3)) )
ex <- e(e(x, x2), e(x3, x2))
sum(ey * ex) / sum(ex ^ 2)
fit <- lm(y ~ x2 + x3 + x4 -1)
eyf <- resid(fit)
ey <- e(e(y, x2), e(e(x2, x4), e(x3, x4)) )
ey <- e(e(y, x2), e(e(x2, x4), e(x3, x4)) )
ey <- e(e(y, x2), e(e(x2, x3), e(x4, x3)) )
ey <- e(e(y, x3), e(e(x2, x3), e(x4, x3)) )
ey <- e(e(y, x4), e(e(x2, x3), e(x4, x3)) )
ey <- e(e(y, x2), e(e(x2, x3), e(x2, x4)) )
fit <- lm(y ~ x2 + x3 + x4 -1)
eyf <- resid(fit)
rm(ex)
ey <- e(e(y, x2), e(e(e(x2, x3), e(x2, x4)), e(x3,x4)) )
ey <- e(e(y, x2), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(y, x2), e(e(e(x2, x3), e(x2, x4)), e(x4,x3)) )
ey <- e(e(y, x2), e(e(e(x2, x3), e(x2, x4)), e(x3,x4)) )
ey <- e(e(y, x2), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x3,x4)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x3,x2)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x4,x2)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x4,x3)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x3, x4)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x4, x3)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(y, x2), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(y, x2), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(y, x2), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x4, x3)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x3,x2)), e(e(x2, x3), e(x2, x4)) )
ey <- e(e(e(y, x2),e(x2,x3)), e(e(x2, x3), e(x2, x4)) )
ey <- e( e(e(y,x2), e(x2,x3)), e(e(x2,x3), e(x2,x4)) )
ey <- e(e(y, x2), e(e(x2, x3), e(x2, x4)) )
ey <- e( e(e(y,x2), e(x2,x3)), e(e(x2,x4), e(x2,x3)) )
ey <- e( e(e(y,x2), e(x2,x3)), e(e(x2,x3), e(x2,x4)) )
n <- 100; x <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n)
y <- x + x2 + x3 + rnorm(n, sd = .1)
e <- function(a, b) a -  sum( a * b ) / sum( b ^ 2) * b
# beta1
ey <- e(e(y, x2), e(x3, x2))
ex <- e(e(x, x2), e(x3, x2))
sum(ey * ex) / sum(ex ^ 2)
# beta2
ey <- e(e(y, x), e(x3, x))
ex <- e(e(x2, x), e(x3, x))
sum(ey * ex) / sum(ex ^ 2)
# beta3
ey <- e(e(y, x), e(x2, x))
ex <- e(e(x3, x), e(x2, x))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(y ~ x + x2 + x3 - 1))
casrs
cars
n <- 100; x <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n)
y <- x + x2 + x3 + rnorm(n, sd = .1)
e <- function(a, b) a -  sum( a * b ) / sum( b ^ 2) * b
# beta1
ey <- e(e(y, x2), e(x3, x2))
ex <- e(e(x, x2), e(x3, x2))
sum(ey * ex) / sum(ex ^ 2)
# beta2
ey <- e(e(y, x), e(x3, x))
ex <- e(e(x2, x), e(x3, x))
sum(ey * ex) / sum(ex ^ 2)
# beta3
ey <- e(e(y, x), e(x2, x))
ex <- e(e(x3, x), e(x2, x))
sum(ey * ex) / sum(ex ^ 2)
coef(lm(y ~ x + x2 + x3 - 1))
library(datasets);
data(swiss);
head(swiss)
library(datasets);
data(swiss);
require(stats);
require(graphics)
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50)
head(swiss)
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50)
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
sum(swiss$Catholic > 50)
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 4 + (swiss$Catholic > 50))
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 5 + (swiss$Catholic > 50))
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 1 + (swiss$Catholic > 50))
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 2 + (swiss$Catholic > 50))
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
install.packages("GGally")
require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
summary(lm(Fertility ~ . , data = swiss))
summary(lm(Fertility ~ . , data = swiss))$coefficients
summary(lm(Fertility ~ Agriculture, data = swiss))$coefficients
plot.new()
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
plot.window()
windows(8,2)
windows(4,2)
pairs(swiss, panel = panel.smooth, main = "Swiss data", col = 3 + (swiss$Catholic > 50))
windows(4,2)
require(ggplot2)
n <- 100; x2 <- 1 : n; x1 <- .01 * x2 + runif(n, -.1, .1); y = -x1 + x2 + rnorm(n, sd = .01)
summary(lm(y ~ x1))$coef
summary(lm(y ~ x1 + x2))$coef
library(slidify)
library(markdown)
library(RCurl)
setwd("C:/z/_Pesquisa/Coursera/TheDataScienceSpecialization/CapstoneProject/FinalProjectRubric/slidifyDSCapstone")
rpubsUpload("FinalProjecRubric", "index.html", id = NULL, properties = list(), method = getOption("rpubs.upload.method", "internal"))
rpubsUpload("FinalProjecRubric", "index.html", id = 77420, properties = list(), method = getOption("rpubs.upload.method", "internal"))
rpubsUpload("FinalProjecRubric", "index.html", id = 77420, properties = list(), method = getOption("rpubs.upload.method", "internal"))
rpubsUpload("FinalProjecRubric", "index.html")
